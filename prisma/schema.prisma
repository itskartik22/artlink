// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  Admin
  Artist
  General
}

enum CommissionCategory {
  Sketch
  Painting
  DigitalArt
}

enum CommissionStatus {
  Pending
  Accepted
  InProgress
  Completed
  Rejected
  Cancelled
}

enum ArtFormType {
  Sketch
  Painting
  DigitalArt
  Sculpture
  Photography
  MixedMedia
  Illustration
  Concept
  Character
  Animation
}

model User {
  id              String    @id @default(uuid())
  name            String?
  email           String    @unique
  username        String?
  phone           String?   @unique
  emailVerified   DateTime?
  phoneVerified   Boolean   @default(false)
  image           String?
  accounts        Account[]
  password        String?
  role            UserRole?
  otp             String?
  otpExpiry       DateTime?
  country         String?   @default("India")
  dob             DateTime?
  gender          String?
  bio             String?
  verifiedByAdmin Boolean   @default(false)
  profileSetup    Boolean   @default(false)
  location        String?
  city            String?
  countryCode     String?
  longitude       Float?
  latitude        Float?
  medium          String?
  experience      String?
  education       String?
  portfolio       String?
  award           String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Cart            Cart[]
  Order           Order[]
  Wishlist        Wishlist[]
  Product         Product[]
  DeliveryAddress DeliveryAddress[]
  clientCommissions Commission[] @relation("ClientCommissions")
  artistCommissions Commission[] @relation("ArtistCommissions")
  proposals        CommissionProposal[]
  commissionSettings ArtistCommissionSettings?
  likes Like[]
}


model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@id([provider, providerAccountId])
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String?
  artistId    String
  price       Float
  images      String[]
  stock       Int
  dimensions  Json?
  medium      String?
  category    String?
  style       String?
  status      String   @default("pending")
  rejectionReason String?
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Cart     Cart[]
  Order    Order[]
  Wishlist Wishlist[]

  user User @relation(fields: [artistId], references: [id], onDelete: Cascade)
  likes Like[]
}

model Cart {
  id        String   @id @default(uuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Order {
  id        String   @id @default(uuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  paymentId String?
  status    String   @default("pending")
  totalAmount Float  @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([productId])
}

model Wishlist {
  id        String   @id @default(uuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model DeliveryAddress {
  id         String  @id @default(uuid())
  userId     String
  name       String
  phone      String
  street     String
  city       String
  state      String
  postalCode String
  country    String  @default("India")
  landmark   String?
  latitude   Float?
  longitude  Float?
  isDefault  Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Commission {
  id          String            @id @default(uuid())
  title       String
  description String
  category    CommissionCategory
  budget      Float
  deadline    DateTime
  status      CommissionStatus  @default(Pending)
  clientId    String
  artistId    String?
  reference   String[]          // Reference images
  requirements String
  size        String?
  medium      String?
  style       String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  client      User              @relation("ClientCommissions", fields: [clientId], references: [id], onDelete: Cascade)
  artist      User?             @relation("ArtistCommissions", fields: [artistId], references: [id], onDelete: SetNull)
  proposals   CommissionProposal[]
}

model CommissionProposal {
  id           String    @id @default(uuid())
  commissionId String
  artistId     String
  price        Float
  timeframe    Int       // In days
  description  String
  status       String    @default("pending") // pending, accepted, rejected
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  commission   Commission @relation(fields: [commissionId], references: [id], onDelete: Cascade)
  artist       User      @relation(fields: [artistId], references: [id], onDelete: Cascade)
}

model ArtistCommissionSettings {
  id                String      @id @default(uuid())
  userId           String      @unique
  isAcceptingCommissions Boolean @default(true)
  basePrice        Float
  pricePerHour     Float?
  minimumPrice     Float
  maximumPrice     Float?
  currency         String      @default("INR")
  turnaroundDays   Int         @default(7)
  artForms         ArtForm[]
  tags             ArtistTag[]
  description      String?
  termsAndConditions String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  user             User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ArtForm {
  id                  String    @id @default(uuid())
  type                ArtFormType
  price               Float?    // Additional price for this art form
  description         String?
  estimatedDays      Int?      // Estimated days for this art form
  artistSettingsId    String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  artistSettings      ArtistCommissionSettings @relation(fields: [artistSettingsId], references: [id], onDelete: Cascade)
}

model ArtistTag {
  id                  String    @id @default(uuid())
  name                String
  artistSettingsId    String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  artistSettings      ArtistCommissionSettings @relation(fields: [artistSettingsId], references: [id], onDelete: Cascade)

  @@unique([name, artistSettingsId])
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
}
